---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.1
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
    - other/**
  :support:
    - test/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :treat_externs: :include

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  # Set to 'true' to enable HTML reports or set to 'false' to disable.
  # Defaults to enabled. (gcovr --html)
  # Deprecated - See the :reports: configuration option.
  :html_report: [true]

  :html_report_type: [detailed]

  :utilities:
    - gcovr           # Use gcovr to create the specified reports (default).
    # - ReportGenerator # Use ReportGenerator to create the specified reports.
  :reports:
    # Make an HTML summary report.
    # Supported utilities: gcovr, ReportGenerator
    # - HtmlBasic

    # Make an HTML report with line by line coverage of each source file.
    # Supported utilities: gcovr, ReportGenerator
    - HtmlDetailed

    # Make a Text report, which may be output to the console with gcovr or a file in both gcovr and ReportGenerator.
    # Supported utilities: gcovr, ReportGenerator
    # - Text

    # Make a Cobertura XML report.
    # Supported utilities: gcovr, ReportGenerator
    # - Cobertura

    # Make a SonarQube XML report.
    # Supported utilities: gcovr, ReportGenerator
    # - SonarQube

    # Make a JSON report.
    # Supported utilities: gcovr
    # - JSON

    # Make a detailed HTML report with CSS and JavaScript included in every HTML page. Useful for build servers.
    # Supported utilities: ReportGenerator
    # - HtmlInline

    # Make a detailed HTML report with a light theme and CSS and JavaScript included in every HTML page for Azure DevOps.
    # Supported utilities: ReportGenerator
    # - HtmlInlineAzure

    # Make a detailed HTML report with a dark theme and CSS and JavaScript included in every HTML page for Azure DevOps.
    # Supported utilities: ReportGenerator
    # - HtmlInlineAzureDark

    # Make a single HTML file containing a chart with historic coverage information.
    # Supported utilities: ReportGenerator
    # - HtmlChart

    # Make a detailed HTML report in a single file.
    # Supported utilities: ReportGenerator
    # - MHtml

    # Make SVG and PNG files that show line and / or branch coverage information.
    # Supported utilities: ReportGenerator
    # - Badges

    # Make a single CSV file containing coverage information per file.
    # Supported utilities: ReportGenerator
    # - CsvSummary

    # Make a single TEX file containing a summary for all files and detailed reports for each files.
    # Supported utilities: ReportGenerator
    # - Latex

    # Make a single TEX file containing a summary for all files.
    # Supported utilities: ReportGenerator
    # - LatexSummary

    # Make a single PNG file containing a chart with historic coverage information.
    # Supported utilities: ReportGenerator
    # - PngChart

    # Command line output interpreted by TeamCity.
    # Supported utilities: ReportGenerator
    # - TeamCitySummary

    # Make a text file in lcov format.
    # Supported utilities: ReportGenerator
    # - lcov

    # Make a XML file containing a summary for all classes and detailed reports for each class.
    # Supported utilities: ReportGenerator
    # - Xml

    # Make a single XML file containing a summary for all files.
    # Supported utilities: ReportGenerator
    # - XmlSummary
  :gcovr:
    # :html_medium_threshold: 75
    # :html_high_threshold: 90

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - gcov
...
